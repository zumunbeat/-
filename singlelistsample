#include <stdio.h>

typedef struct NODE {
	//관리될 데이터
	int nData;

	//데이터 관리를 위한 포인터
	struct NODE* next;
} NODE;

int main() {

	NODE list[5] = { 0 };

	list[0].next = &list[1];
	list[1].next = &list[2];
	list[2].next = &list[3];
	list[3].next = &list[4];
	list[4].next = NULL;

	list[0].nData = 100;
	list[1].nData = 200;
	list[2].nData = 300;
	list[3].nData = 400;
	list[4].nData = 500;

	for (int i = 0; i < 5; ++i) printf("list[%d]:%d\n", i, list[i].nData);
	
	NODE*pTmp=&list[0];
	while(pTmp!=NULL){
		printf("list[%p]:%d\n", pTmp, pTmp->nData);
		pTmp = pTmp->next;
	}
	return 0;
}
------------------------------------------------------------------------------------------------------------------------------------------
#include<stdio.h>
#include<string.h>
#include<malloc.h>
typedef struct NODE {
    char szData[64];

    struct NODE* next;
} NODE;

NODE* p_head = NULL;

void PrintNode(void) {
    NODE* pHead = p_head;
    while (pHead != NULL) {
        printf("[%p] %s, next[%p]\n",pHead, pHead->szData,pHead->next);
        pHead = pHead->next;
    }

    putchar('\n');
}

int InsertNewNode(char* pszData) {
    NODE* pNode = (NODE*)malloc(sizeof(NODE));
    memset(pNode, 0, sizeof(NODE));
    strcpy_s(pNode->szData, sizeof(pNode->szData), pszData);

    if (p_head == NULL)
        p_head = pNode;
    else{
        pNode->next = p_head;
        p_head = pNode;
    }
    return 1;
}

void ReleaseList(void) {
    NODE* pTmp = p_head;
    while (pTmp != NULL) {
        NODE* pDelete = pTmp;
        pTmp = pTmp->next;

        printf("Delete:[%p] %s\n", pDelete, pDelete->szData);
        free(pDelete);
    }
}


int main() {
    //List 테스트를 위한 코드
    InsertNewNode("Test01");
    PrintNode();
    InsertNewNode("Test02");
    PrintNode();
    InsertNewNode("Test03");
    PrintNode();
    return 0;
}




