#include <stdio.h>
#include <string.h>
#include <malloc.h>


typedef struct NODE {
    //관리 대상 데이터
    void* pData;

    //자료구조
    struct NODE* prev;
    struct NODE* next;
} NODE;

NODE* g_phead, * g_ptail;
int g_nSize;

//void InsertBefore(NODE* pTmp, USERDATA* pParam);
int InsertAtHead(void* pParam);
int InsertAtTail(void* pParam);
void InsertBefore(NODE* pDstNode, void* pParam);

typedef struct USERDATA {
    //멤버 함수 포인터
    const char* (*GetKey)(void*);
    
    char szName[64];        //Key
    char szPhone[64];
    
} USERDATA;     

const char* GetKeyFromUserData(USERDATA* pUser) {
    return pUser->szName;
}

USERDATA* CreateUserData(const char* pszName, const char* pszPhone) {
    USERDATA* pNewData = (USERDATA*)malloc(sizeof(USERDATA));
    memset(pNewData, 0, sizeof(USERDATA));

    strcpy_s(pNewData->szName, sizeof(pNewData->szName), pszName);
    strcpy_s(pNewData->szPhone, sizeof(pNewData->szPhone), pszPhone);

    //구조체 멤버 함수포인터 초기화
    pNewData->GetKey = GetKeyFromUserData;
    
    return pNewData;
}

void InitList(void) {
    g_phead = malloc(sizeof(NODE));
    g_ptail = malloc(sizeof(NODE)); 
    memset(g_ptail, 0, sizeof(NODE));

    g_phead->next = g_ptail;
    g_ptail->prev = g_phead;

}

void ReleaseList(void) {
    NODE* pTmp = g_phead;
    while (pTmp != NULL) {
        NODE* pDelete = pTmp;
        pTmp = pTmp->next;

        printf("free(%p)\n", pDelete);

        free(pDelete->pData);
        free(pDelete);
    }

    g_phead = NULL;
    g_ptail = NULL;
    g_nSize = 0;
    puts("ReleaseList()");
}



 void PrintList(void) {
    int i = 0;
    printf("PrintList(): g_nSize:%d g_phead [%p], g_tail[%p]\n", g_nSize, g_phead, g_ptail);
    NODE* pTmp = g_phead;
    while (pTmp != NULL) {
        if(pTmp==g_phead||pTmp==g_ptail)
        printf("DUMMY\n");
        else {
            USERDATA* pUser=pTmp->pData;
            printf("Index:%d %s\n", i, 
                pUser->GetKey(pUser));
            ++i;
        }
        pTmp = pTmp->next;
    }
}

//pParam: 호출자가 메모리를 동적할당, 초기화까지 해서 전달해야한다.
int InsertAtHead(void* pParam) {
    NODE* pNewNode=malloc(sizeof(NODE));
    memset(pNewNode, 0, sizeof(NODE));

    pNewNode->pData = pParam;
    
    //연결리스트에 관한 초기화
    pNewNode->next = g_phead->next;
    pNewNode->prev = g_phead;

    //관리 대상 자료에 관한 초기화
    g_phead->next = pNewNode;       
    pNewNode->next->prev = pNewNode;

    g_nSize++;

    return g_nSize;
}


int InsertAtTail(void* pParam) {
    InsertBefore(g_ptail, pParam);
    return g_nSize;
}

NODE* FindNode(const char* pszKey){
    NODE* pTmp = g_phead->next;
    const char* (*pfGetKey)(void*)=NULL;   
    while (pTmp != g_ptail) {
        //관리 대상 데이터 구조체 첫번째 멤버가 함수 포인터임을 가정
        pfGetKey = pTmp->pData;
        if (strcmp(pfGetKey(pTmp->pData), pszKey) == 0)
            return pTmp;
        pTmp = pTmp->next;
    }
    return NULL;
}

int DeleteNode(const char* pszKey){
    NODE* pNode = FindNode(pszKey);
    pNode->next->prev = pNode->prev;
    pNode->prev->next = pNode->next;
    
    free(pNode->pData);
    free(pNode);
    printf("DeleteNode():%p\n", pNode);
    g_nSize--;
    return 0;
}

int GetSize(void) {
    return g_nSize;
}

int GetLength(void) {
    return GetSize();
}

int IsEmpty(void) {
    return GetSize();
}

void InsertBefore(NODE* pDstNode,void* pParam) {
     NODE* pNewNode = malloc(sizeof(NODE));
     memset(pNewNode, 0, sizeof(NODE));
     
     pNewNode->pData = pParam;
     

     pNewNode->prev = pDstNode->prev;
     pNewNode->next = pDstNode;

     pDstNode->prev = pNewNode;
     pDstNode->prev->next = pNewNode;

     g_nSize++;
}
int InsertAt(int idx, void* pParam) {
    int i = 0;
    NODE* pTmp = g_phead->next;
    while (pTmp != g_ptail) {
        if (i==idx) {
            InsertBefore(pTmp,pParam);
            return i;
        }
            ++i;
            pTmp = pTmp->next;
    }

    InsertAtTail(pParam);
    return i;
}

NODE* GetAt(int idx) {
    int i = 0;
    NODE* pTmp = g_phead->next;
    while (pTmp != g_ptail) {
        if (i == idx)
            return pTmp;
        
        pTmp = pTmp->next;
        ++i;
    }
    return NULL;
}
int main(void) {
    InitList();
    
    USERDATA* pNewData = NULL;
    pNewData= CreateUserData("KSH", "010-1231-3123"); //관리할 데이터를 받아
    InsertAtTail(pNewData); //자료구조를 설정해라
    pNewData = CreateUserData("TEst", "010-5343-3123");
    InsertAtTail(pNewData);

    PrintList();

    ReleaseList();

    return 0;
}
