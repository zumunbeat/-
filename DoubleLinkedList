#include <stdio.h>
#include <string.h>
#include <malloc.h>


typedef struct NODE {
    char szData[64];

    struct NODE* prev;
    struct NODE* next;
} NODE;

NODE* g_phead, *g_ptail;
int g_nSize;

void InitList(void) {
    g_phead = malloc(sizeof(NODE));
    g_ptail = malloc(sizeof(NODE));
    g_nSize = 0;
    
    memset(g_phead, 0, sizeof(NODE));
    memset(g_ptail, 0, sizeof(NODE));

    strcpy_s(g_phead->szData, sizeof(g_phead->szData), "Dummy Head");
    strcpy_s(g_ptail->szData, sizeof(g_ptail->szData), "Dummy Tail");
    g_phead->next = g_ptail;
    g_ptail->prev = g_phead;

}

void ReleaseList(void) {
    NODE* pTmp = g_phead;
    while (pTmp != NULL) {
        NODE* pDelete = pTmp;
        pTmp = pTmp->next;

        printf("free(%p)\n", pDelete);
        free(pDelete);
    }

    g_phead = NULL;
    g_ptail = NULL;
    g_nSize = 0;
    puts("ReleaseList()");
}

void PrintList(void) {
    printf("PrintList(): g_nSize:%d g_phead [%p], g_tail[%p]\n", g_nSize, g_phead, g_ptail);
    NODE* pTmp = g_phead;
    while (pTmp != NULL) {
        printf("[%p] %s [%p]\n", pTmp->prev, pTmp->szData, pTmp->next);
        pTmp = pTmp->next;
    }
}

int InsertAtHead(const char *pszData) {
    NODE* pNewNode=malloc(sizeof(NODE));
    memset(pNewNode, 0, sizeof(NODE));

    strcpy_s(pNewNode->szData, sizeof(pNewNode->szData), pszData);
    pNewNode->next = g_phead->next;
    pNewNode->prev = g_phead;

    g_phead->next = pNewNode;
    pNewNode->next->prev = pNewNode;

    g_nSize++;

    return g_nSize;
}

int InsertAtTail(const char *pszData) {
    NODE* pNewNode = malloc(sizeof(NODE));
    memset(pNewNode, 0, sizeof(NODE));

    strcpy_s(pNewNode->szData, sizeof(pNewNode->szData), pszData);
    pNewNode->next = g_ptail;
    pNewNode->prev = g_ptail->prev;

    g_ptail->prev->next = pNewNode;
    g_ptail->prev = pNewNode;

    g_nSize++;

    return g_nSize;
}

NODE* FindNode(const char* pszData) {
    NODE* pTmp = g_phead->next;
    while (pTmp != g_ptail) {
        if (strcmp(pTmp->szData, pszData) == 0)
            return pTmp;
        pTmp = pTmp->next;
    }
    return NULL;
}

int DeleteNode(const char* pszData){
    NODE* pNode = FindNode(pszData);
    pNode->next->prev = pNode->prev;
    pNode->prev->next = pNode->next;
    
    free(pNode);
    printf("DeleteNode():%p\n", pNode);
    return 0;
}

int GetSize(void) {
    return g_nSize;
}

int GetLength(void) {
    return GetSize();
}

int IsEmpty(void) {
    return GetSize();
}
int main(void) {
    InitList();

    InsertAtTail("Test01");
    InsertAtTail("Test02");
    InsertAtTail("Test03");

    DeleteNode("Test01");
    DeleteNode("Test02");
    DeleteNode("Test03");

    InsertAtTail("Test01");
    InsertAtTail("Test02");
    InsertAtTail("Test03");

    PrintList();
    ReleaseList();

    return 0;
}
